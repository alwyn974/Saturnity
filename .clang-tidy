---
Checks: '-*,
boost-use-to-string,
bugprone-argument-comment,
bugprone-assert-side-effect,
bugprone-assignment-in-if-condition,
bugprone-bad-signal-to-kill-thread,
bugprone-branch-clone,
bugprone-copy-constructor-init,
bugprone-dangling-handle,
bugprone-dynamic-static-initializers,
bugprone-fold-init-type,
bugprone-forward-declaration-namespace,
bugprone-forwarding-reference-overload,
bugprone-implicit-widening-of-multiplication-result,
bugprone-inaccurate-erase,
bugprone-incorrect-roundings,
bugprone-infinite-loop,
bugprone-integer-division,
bugprone-lambda-function-name,
bugprone-macro-parentheses,
bugprone-macro-repeated-side-effects,
bugprone-misplaced-operator-in-strlen-in-alloc,
bugprone-misplaced-pointer-arithmetic-in-alloc,
bugprone-misplaced-widening-cast,
bugprone-move-forwarding-reference,
bugprone-multiple-statement-macro,
bugprone-no-escape,
bugprone-not-null-terminated-result,
bugprone-parent-virtual-call,
bugprone-posix-return,
bugprone-redundant-branch-condition,
bugprone-reserved-identifier,
bugprone-shared-ptr-array-mismatch,
bugprone-sizeof-container,
bugprone-sizeof-expression,
bugprone-spuriously-wake-up-functions,
bugprone-standalone-empty,
bugprone-string-constructor,
bugprone-string-integer-assignment,
bugprone-string-literal-with-embedded-nul,
bugprone-stringview-nullptr,
bugprone-suspicious-enum-usage,
bugprone-suspicious-include,
bugprone-suspicious-memory-comparison,
bugprone-suspicious-memset-usage,
bugprone-suspicious-missing-comma,
bugprone-suspicious-realloc-usage,
bugprone-suspicious-semicolon,
bugprone-suspicious-string-compare,
bugprone-swapped-arguments,
bugprone-terminating-continue,
bugprone-throw-keyword-missing,
bugprone-too-small-loop-variable,
bugprone-unchecked-optional-access,
bugprone-undefined-memory-manipulation,
bugprone-undelegated-constructor,
bugprone-unhandled-exception-at-new,
bugprone-unhandled-self-assignment,
bugprone-unused-raii,
bugprone-unused-return-value,
bugprone-use-after-move,
bugprone-virtual-near-miss,
cert-dcl21-cpp,
cert-dcl50-cpp,
cert-dcl58-cpp,
cert-env33-c,
cert-err33-c, 
cert-err34-c,
cert-err52-cpp,
cert-err60-cpp,
cert-flp30-c,
cert-mem57-cpp,
cert-msc50-cpp,
cert-msc51-cpp,
cert-oop57-cpp,
cert-oop58-cpp,
cert-str34-c,
clang-analyzer-nullability.NullableReturnedFromNonnull,
clang-analyzer-cplusplus.InnerPointer,
clang-analyzer-valist.CopyToSelf,
clang-analyzer-valist.Uninitialized,
clang-analyzer-valist.Unterminated,
cppcoreguidelines-avoid-const-or-ref-data-members,
cppcoreguidelines-avoid-goto,
cppcoreguidelines-avoid-reference-coroutine-parameters,
cppcoreguidelines-interfaces-global-init,
cppcoreguidelines-macro-usage,
cppcoreguidelines-narrowing-conversions,
cppcoreguidelines-no-malloc,
cppcoreguidelines-pro-type-cstyle-cast,
cppcoreguidelines-pro-type-member-init,
cppcoreguidelines-pro-type-reinterpret-cast,
cppcoreguidelines-pro-type-vararg,
cppcoreguidelines-slicing,
google-build-using-namespace,
google-default-arguments,
google-explicit-constructor,
google-global-names-in-headers,
google-readability-casting,
google-readability-todo,
google-upgrade-googletest-case,
google-runtime-operator,
hicpp-exception-baseclass,
hicpp-multiway-paths-covered,
hicpp-signed-bitwise,
hicpp-multiway-paths-covered,
misc-const-correctness,
misc-confusable-identifiers,
misc-definitions-in-headers,
misc-misleading-bidirectional,
misc-misleading-identifier,
misc-misplaced-const,
misc-new-delete-overloads,
misc-no-recursion,
misc-non-copyable-objects,
misc-redundant-expression,
misc-static-assert,
misc-throw-by-value-catch-by-reference,
misc-unconventional-assign-operator,
misc-uniqueptr-reset-release,
misc-unused-using-decls,
misc-use-anonymous-namespace,
modernize-avoid-bind,
modernize-avoid-c-arrays,
modernize-concat-nested-namespaces,
modernize-deprecated-headers,
modernize-deprecated-ios-base-aliases,
modernize-loop-convert,
modernize-macro-to-enum,
modernize-make-shared,
modernize-make-unique,
modernize-pass-by-value,
modernize-raw-string-literal,
modernize-redundant-void-arg,
modernize-replace-auto-ptr,
modernize-replace-disallow-copy-and-assign-macro,
modernize-replace-random-shuffle,
modernize-return-braced-init-list,
modernize-shrink-to-fit,
modernize-unary-static-assert,
modernize-use-auto,
modernize-use-bool-literals,
modernize-use-emplace,
modernize-use-equals-default,
modernize-use-equals-delete,
modernize-use-nodiscard,
modernize-use-noexcept,
modernize-use-nullptr,
modernize-use-override,
modernize-use-transparent-functors,
modernize-use-uncaught-exceptions,
mpi-buffer-deref,
mpi-type-mismatch,
openmp-use-default-none,
performance-faster-string-find,
performance-for-range-copy,
performance-implicit-conversion-in-loop,
performance-inefficient-algorithm,
performance-inefficient-string-concatenation,
performance-inefficient-vector-operation,
performance-move-const-arg,
performance-move-constructor-init,
performance-no-int-to-ptr,
performance-no-automatic-move,
performance-noexcept-move-constructor,
performance-trivially-destructible,
performance-type-promotion-in-math-fn,
performance-unnecessary-copy-initialization,
performance-unnecessary-value-param,
portability-simd-intrinsics,
portability-std-allocator-const,
readability-avoid-const-params-in-decls,
readability-const-return-type,
readability-container-contains,
readability-container-data-pointer,
readability-container-size-empty,
readability-convert-member-functions-to-static,
readability-delete-null-pointer,
readability-deleted-default,
readability-duplicate-include,
readability-else-after-return,
readability-implicit-bool-conversion,
readability-inconsistent-declaration-parameter-name,
readability-make-member-function-const,
readability-misleading-indentation,
readability-misplaced-array-index,
readability-non-const-parameter,
readability-identifier-naming,
readability-redundant-access-specifiers,
readability-redundant-control-flow,
readability-redundant-declaration,
readability-redundant-function-ptr-dereference,
readability-redundant-member-init,
readability-redundant-preprocessor,
readability-redundant-smartptr-get,
readability-redundant-string-cstr,
readability-redundant-string-init,
readability-simplify-boolean-expr,
readability-simplify-subscript-expr,
readability-static-accessed-through-instance,
readability-static-definition-in-anonymous-namespace,
readability-string-compare,
readability-suspicious-call-argument,
readability-uniqueptr-delete-release,
readability-uppercase-literal-suffix,
readability-use-anyofallof'
CheckOptions:
  # Readability Identifier
#  - { key: readability-identifier-naming.AbstractClassCase, value: CamelCase } # Abstract Class
  - { key: readability-identifier-naming.AbstractClassPrefix, value: Abstract } # Abstract Class Prefix
  - { key: readability-identifier-naming.AggressiveDependentMemberLookup, value: 'true' } # refactoring agressively
  - { key: readability-identifier-naming.ClassConstantCase, value: UPPER_CASE } # static const
  - { key: readability-identifier-naming.ClassMemberCase, value: camelBack } # methods
  - { key: readability-identifier-naming.ConstantCase , value: camelBack } # const in method
  - { key: readability-identifier-naming.ConstantMemberCase, value: UPPER_CASE } # const
  - { key: readability-identifier-naming.ConstantParameterCase, value: camelBack } # const parameter in method
  - { key: readability-identifier-naming.ConstantPointerParameterCase, value: camelBack } # const parameter pointer in method
  - { key: readability-identifier-naming.ConstexprFunctionCase, value: camelBack } # constexpr function
  - { key: readability-identifier-naming.ConstexprMethodCase, value: camelBack } # constexpr method
  - { key: readability-identifier-naming.ConstexprVariableCase, value: UPPER_CASE } # constexpr variable
  - { key: readability-identifier-naming.EnumCase, value: CamelCase } # enum
  - { key: readability-identifier-naming.EnumConstantCase, value: UPPER_CASE } # enum constant
  - { key: readability-identifier-naming.FunctionCase, value: camelBack } # function
  - { key: readability-identifier-naming.GlobalConstantCase, value: UPPER_CASE } # global const
  - { key: readability-identifier-naming.GlobalConstantPointerCase , value: UPPER_CASE } # global const pointer
  - { key: readability-identifier-naming.GlobalFunctionCase, value: camelBack } # global function
  - { key: readability-identifier-naming.GlobalPointerCase, value: camelBack } # global variable pointer
  - { key: readability-identifier-naming.GlobalVariableCase, value: camelBack } # global variable
  - { key: readability-identifier-naming.InlineNamespaceCase, value: lower_case } # inline namespace
  - { key: readability-identifier-naming.LocalConstantCase, value: camelBack } # local const
  - { key: readability-identifier-naming.LocalConstantPointerCase, value: camelBack } # local const pointer
  - { key: readability-identifier-naming.LocalPointerCase, value: camelBack } # local variable pointer
  - { key: readability-identifier-naming.LocalVariableCase, value: camelBack } # local variable
  - { key: readability-identifier-naming.MacroDefinitionCase, value: UPPER_CASE } # macro definition
  - { key: readability-identifier-naming.MemberCase, value: camelBack } # member variable
  - { key: readability-identifier-naming.MethodCase, value: camelBack } # member method
  - { key: readability-identifier-naming.NamespaceCase, value: lower_case } # namespace
  - { key: readability-identifier-naming.ParameterCase, value: camelBack } # parameter
  - { key: readability-identifier-naming.ParameterPackCase, value: CamelCase } # parameter pack (variadic template)
  - { key: readability-identifier-naming.PointerParameterCase, value: camelBack } # parameter pointer
  - { key: readability-identifier-naming.PrivateMemberCase, value: camelBack } # private member variable
  - { key: readability-identifier-naming.PrivateMemberPrefix, value: '_' } # private member variable prefix
  - { key: readability-identifier-naming.PrivateMethodCase, value: camelBack } # private member method
  - { key: readability-identifier-naming.ProtectedMemberCase, value: camelBack } # protected member variable
  - { key: readability-identifier-naming.ProtectedMethodCase, value: camelBack } # protected member method
  - { key: readability-identifier-naming.PublicMemberCase, value: camelBack } # public member variable
  - { key: readability-identifier-naming.PublicMethodCase, value: camelBack } # public member method
  - { key: readability-identifier-naming.ScopedEnumConstantCase, value: CamelCase } # scoped enum constant
  - { key: readability-identifier-naming.StaticConstantCase, value: UPPER_CASE } # static const
  - { key: readability-identifier-naming.StaticVariableCase, value: camelBack } # static variable
  - { key: readability-identifier-naming.StructCase, value: CamelCase } # struct
  - { key: readability-identifier-naming.TemplateParameterCase, value: CamelCase } # template parameter
  - { key: readability-identifier-naming.TemplateTemplateParameterCase, value: CamelCase } # template template parameter
  - { key: readability-identifier-naming.TypeAliasCase, value: CamelCase } # type alias
  - { key: readability-identifier-naming.TypedefCase, value: aNy_CasE } # typedef
  - { key: readability-identifier-naming.TypeTemplateParameterCase, value: aNy_CasE } # type template parameter
  - { key: readability-identifier-naming.UnionCase, value: CamelCase } # union
  - { key: readability-identifier-naming.ValueTemplateParameterCase, value: aNy_CasE } # value template parameter
  - { key: readability-identifier-naming.VariableCase, value: camelBack } # variable
  - { key: readability-identifier-naming.VirtualMethodCase, value: camelBack } # virtual method
UseColor: true
